// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    firstName       String?
    lastName        String?
    imageUrl        String?
    emailAddress    String            @unique
    credits         Int               @default(50)
    searchedCommits searchedCommits[]
    UsertoProject   UsertoProject[]
    savedQuestions  Question[]
    transactions    Transaction[]
}

model Transaction {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    userId            String
    orderCreationId   String?
    razorpayPaymentId String?
    razorpayOrderId   String?
    razorpaySignature String?
    credits           Int
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model searchedCommits {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    commitUrl String
    summary   String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

model Project {
    id                   String                @id @default(cuid())
    name                 String
    githubUrl            String
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    UsertoProject        UsertoProject[]
    commits              Commit[]
    sourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestions       Question[]
    meetings             Meeting[]
}

model UsertoProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    projectId String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, userId])
}

model SourceCodeEmbedding {
    id               String                      @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String
    projectId        String
    project          Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    commitHash         String
    commitMessage      String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    question       String
    answer         String
    fileReferences Json?
    userId         String
    user           User     @relation(fields: [userId], references: [id])
    projectId      String
    project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Meeting {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    name       String
    meetingUrl String
    projectId  String
    project    Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
    status     MeetingStatus @default(PROCESSING)
    issue      Issue[]
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    start     String
    end       String
    summary   String
    gist      String
    headline  String
    meetingId String
    meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}
